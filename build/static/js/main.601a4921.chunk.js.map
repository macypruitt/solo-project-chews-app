{"version":3,"sources":["components/Nav/logo.png","components/MapPage/gpsicon.svg","components/MapPage/restaurant.svg","components/MapPage/compass.svg","redux/reducers/errors.reducer.js","redux/reducers/loginMode.reducer.js","redux/reducers/user.reducer.js","redux/reducers/restaurants.reducer.js","redux/reducers/admin.reducer.js","redux/reducers/edit.reducer.js","redux/reducers/modal.Reducer.js","redux/reducers/_root.reducer.js","redux/sagas/login.saga.js","redux/sagas/registration.saga.js","redux/sagas/user.saga.js","redux/sagas/restaurants.saga.js","redux/sagas/_root.saga.js","components/LogOutButton/LogOutButton.js","redux/mapStoreToProps.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/InfoPage/InfoPage.js","components/UserPage/UserPage.js","components/LandingPage/LandingPage.js","components/MapPage/Marker.js","components/MapPage/Modal.js","components/MapPage/MapPage.js","components/SuggestPage/SuggestPage.js","components/AdminListItem/AdminListItem.js","components/AdminListPage/AdminListPage.js","components/EditPage/EditPage.js","components/App/App.js","index.js"],"names":["module","exports","combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","userReducer","payload","restaurantsReducer","adminReducer","editReducer","modalReducer","rootReducer","errors","user","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","fetchUser","userSaga","get","data","getApprovedList","postNewSubmission","getAdminList","getEditItem","updateEditItem","deleteListing","restaurantsSaga","delete","rootSaga","all","connect","props","className","onClick","dispatch","mapStoreToProps","reduxState","store","admin","to","src","logo","alt","id","Footer","LoginPage","username","password","login","event","preventDefault","handleInputChangeFor","propertyName","setState","target","value","this","role","onSubmit","htmlFor","name","onChange","Component","RegisterPage","ComponentToShow","ComponentToProtect","component","authRedirect","otherProps","exact","from","path","InfoPage","LandingPage","heading","onLogin","history","push","Marker","fontSize","modalToggle","item","Modal","Button","size","address","phone","Silverware","description","href","mapStyles","require","theme","createMuiTheme","palette","primary","main","secondary","MapPage","modalIsShowing","show","lat","lng","handleModal","prevState","changeFilter","onPositionReceived","position","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","restaurantsArray","map","index","key","filter","vegan","gluten_free","keto","detailsPane","style","height","width","bootstrapURLKeys","process","defaultCenter","center","defaultZoom","zoom","options","styles","gpslogo","ThemeProvider","ButtonGroup","variant","color","defaultProps","SubmitPage","website","submitted","approved","handleClickSubmit","Swal","fire","text","confirmButtonText","then","result","dataKey","fieldValue","checked","placeholder","handleChangeInputText","handleCheckbox","for","AdminListItem","clickEdit","listing","date","moment","format","withRouter","AdminListPage","adminList","EditPage","dispatchObject","consolidateEdit","match","params","submitThisObject","listingFromDatabase","App","SuggestPage","render","sagaMiddleware","createSagaMiddleware","middlewareList","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,4HCA3CD,EAAOC,QAAU,IAA0B,qC,utCCqC5BC,G,OAAAA,YAAgB,CAC7BC,aAlCmB,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAQA,EAAOC,MACb,IAAK,oBACH,MAAO,GACT,IAAK,oBACH,MAAO,oCACT,IAAK,eACH,MAAO,2DACT,IAAK,uBACH,MAAO,qDACT,QACE,OAAOF,IAwBXG,oBAlB0B,WAAyB,IAAxBH,EAAuB,uDAAf,GAAIC,EAAW,uCAClD,OAAQA,EAAOC,MACb,IAAK,2BACH,MAAO,GACT,IAAK,2BACH,MAAO,kCACT,IAAK,sBACH,MAAO,0EACT,QACE,OAAOF,OCjBII,EAbC,WAA8B,IAA7BJ,EAA4B,uDAApB,QAASC,EAAW,uCAC3C,OAAQA,EAAOC,MACb,IAAK,oBACH,MAAO,QACT,IAAK,uBACH,MAAO,WACT,QACE,OAAOF,ICMAK,EAbK,WAAyB,IAAxBL,EAAuB,uDAAf,GAAIC,EAAW,uCAC1C,OAAQA,EAAOC,MACb,IAAK,WACH,OAAOD,EAAOK,QAChB,IAAK,aACH,MAAO,GACT,QACE,OAAON,ICEIO,EATU,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIC,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IAAK,WACH,OAAOD,EAAOK,QAChB,QACE,OAAON,ICIEQ,EATI,WAAyB,IAAxBR,EAAuB,uDAAf,GAAIC,EAAW,uCACzC,OAAQA,EAAOC,MACb,IAAK,YACH,OAAOD,EAAOK,QAChB,QACE,OAAON,ICIES,EATG,WAAyB,IAAxBT,EAAuB,uDAAf,GAAIC,EAAW,uCACxC,OAAQA,EAAOC,MACb,IAAK,WACH,OAAOD,EAAOK,QAChB,QACE,OAAON,ICIEU,EATI,WAAyB,IAAxBV,EAAuB,uDAAf,GAAIC,EAAW,uCACzC,OAAQA,EAAOC,MACb,IAAK,aACH,OAAOD,EAAOK,QAChB,QACE,OAAON,ICoBAW,EAVKb,YAAgB,CAClCc,SACAR,YACAS,OACAN,qBACAC,eACAC,cACAC,iB,mDClBQI,G,WAkCAC,G,WAuBAC,GAzDV,SAAUF,EAAUb,GAApB,uEAGI,OAHJ,kBAGUgB,YAAI,CAAEf,KAAM,sBAHtB,OAaI,OARMgB,EAAS,CACbC,QAAS,CAAE,eAAgB,oBAC3BC,iBAAiB,GAPvB,SAaUC,IAAMC,KAAK,iBAAkBrB,EAAOK,QAASY,GAbvD,OAiBI,OAjBJ,SAiBUD,YAAI,CAACf,KAAM,eAjBrB,4DAmBIqB,QAAQC,IAAI,yBAAZ,MAC8B,MAA1B,KAAMC,SAASC,OApBvB,iBAwBM,OAxBN,UAwBYT,YAAI,CAAEf,KAAM,iBAxBxB,gCA4BM,OA5BN,UA4BYe,YAAI,CAAEf,KAAM,yBA5BxB,sDAkCA,SAAUa,EAAWd,GAArB,uEAWI,OAXJ,SAEUiB,EAAS,CACbC,QAAS,CAAE,eAAgB,oBAC3BC,iBAAiB,GAJvB,SAWUC,IAAMC,KAAK,kBAAmBJ,GAXxC,OAgBI,OAhBJ,SAgBUD,YAAI,CAAEf,KAAM,eAhBtB,uDAmBIqB,QAAQC,IAAI,0BAAZ,MAnBJ,qDAuBA,SAAUR,IAAV,iEACE,OADF,SACQW,YAAW,QAASb,GAD5B,OAEE,OAFF,SAEQa,YAAW,SAAUZ,GAF7B,uCAKeC,Q,WC9DLY,G,WAoBAC,GApBV,SAAUD,EAAa3B,GAAvB,iEAGI,OAHJ,kBAGUgB,YAAI,CAAEf,KAAM,6BAHtB,OAMI,OANJ,SAMUmB,IAAMC,KAAK,oBAAqBrB,EAAOK,SANjD,OASI,OATJ,SASUW,YAAI,CAAEf,KAAM,QAASI,QAASL,EAAOK,UAT/C,OAaI,OAbJ,SAaUW,YAAI,CAACf,KAAM,sBAbrB,+BAgBM,OAhBN,0BAeMqB,QAAQC,IAAI,gCAAZ,MAfN,UAgBYP,YAAI,CAACf,KAAM,wBAhBvB,sDAoBA,SAAU2B,IAAV,iEACE,OADF,SACQF,YAAW,WAAYC,GAD/B,uCAIeC,Q,WCxBLC,G,WAsBAC,GAtBV,SAAUD,IAAV,yEAWqB,OAXrB,SAEUZ,EAAS,CACbC,QAAS,CAAE,eAAgB,oBAC3BC,iBAAiB,GAJvB,SAW2BC,IAAMW,IAAI,WAAYd,GAXjD,OAgBI,OALMO,EAXV,gBAgBUR,YAAI,CAAEf,KAAM,WAAYI,QAASmB,EAASQ,OAhBpD,uDAkBIV,QAAQC,IAAI,0BAAZ,MAlBJ,qDAsBA,SAAUO,IAAV,iEACE,OADF,SACQJ,YAAW,aAAcG,GADjC,uCAIeC,Q,WC3BLG,G,WAUEC,G,WAYAC,G,WAUAC,G,WAUAC,G,WASAC,G,WASFC,GA5DV,SAAUN,IAAV,uEAEuB,OAFvB,kBAE6Bb,IAAMW,IAAI,6BAFvC,OAGM,OADMP,EAFZ,gBAGYR,YAAI,CAACf,KAAM,WAAYI,QAASmB,EAASQ,OAHrD,uDAMMV,QAAQC,IAAI,eAAZ,MANN,qDAUE,SAAUW,EAAkBlC,GAA5B,uEAEqB,OAFrB,kBAE2BoB,IAAMC,KAAK,YAAarB,EAAOK,SAF1D,OAEUmB,EAFV,OAKIF,QAAQC,IAAI,0BAA2BC,EAASQ,MALpD,gDAQIV,QAAQC,IAAI,gBAAZ,MARJ,qDAYA,SAAUY,IAAV,uEAEqB,OAFrB,kBAE2Bf,IAAMW,IAAI,uBAFrC,OAGI,OADMP,EAFV,gBAGUR,YAAI,CAACf,KAAM,YAAaI,QAASmB,EAASQ,OAHpD,uDAMIV,QAAQC,IAAI,8BAAZ,MANJ,qDAUA,SAAUa,EAAYpC,GAAtB,uEAEqB,OAFrB,kBAE2BoB,IAAMW,IAAN,iCAAoC/B,EAAOK,UAFtE,OAGI,OADMmB,EAFV,gBAGUR,YAAI,CAACf,KAAM,WAAYI,QAASmB,EAASQ,OAHnD,uDAMIV,QAAQC,IAAI,uCAAZ,MANJ,qDAUA,SAAUc,EAAerC,GAAzB,iEAEI,OAFJ,kBAEUoB,IAAMJ,IAAN,kBAA6BhB,EAAOK,SAF9C,sDAKIiB,QAAQC,IAAI,wBAAZ,MALJ,oDASA,SAAUe,EAActC,GAAxB,iEAEqB,OAFrB,kBAE2BoB,IAAMoB,OAAN,2BAAiCxC,EAAOK,UAFnE,6DAKIiB,QAAQC,IAAI,uCAAZ,MALJ,oDASF,SAAUgB,IAAV,iEACI,OADJ,SACUb,YAAW,WAAYO,GADjC,OAEI,OAFJ,SAEUP,YAAW,cAAeQ,GAFpC,OAGI,OAHJ,SAGUR,YAAW,YAAaS,GAHlC,OAII,OAJJ,SAIUT,YAAW,WAAYU,GAJjC,OAKI,OALJ,UAKUV,YAAW,WAAYW,GALjC,QAMI,OANJ,UAMUX,YAAW,iBAAkBY,GANvC,wCAUiBC,S,YC5DQE,IAAV,SAAUA,KAAV,iEACb,OADa,SACPC,YAAI,CACR3B,IACAa,IACAE,IACAS,OALW,wC,mECMAI,kBAhBM,SAAAC,GAAK,OACxB,4BAIEC,UAAWD,EAAMC,UACjBC,QAAS,kBAAMF,EAAMG,SAAS,CAAE9C,KAAM,aALxC,cCUa+C,I,OAdS,SAACC,GACrB,MAAO,CACHC,MAAOD,EAKPrC,KAAMqC,EAAWrC,KACjBT,UAAW8C,EAAW9C,UACtBQ,OAAQsC,EAAWtC,OACnBwC,MAAOF,EAAW1C,gB,qBC0CXoC,eAAQK,GAARL,EA5CH,SAACC,GAAD,OACV,yBAAKC,UAAU,OACb,kBAAC,KAAD,CAAMO,GAAG,SACP,yBAAKC,IAAKC,KAAMT,UAAU,WAAWU,IAAI,WAE3C,yBAAKV,UAAU,aAEb,kBAAC,KAAD,CAAMA,UAAU,WAAWO,GAAG,QAA9B,OAMA,kBAAC,KAAD,CAAMP,UAAU,WAAWO,GAAG,YAA9B,sBAeCR,EAAMM,MAAMtC,KAAK4C,IAChB,oCACE,kBAAC,KAAD,CAAMX,UAAU,WAAWO,GAAG,SAA9B,aAGA,kBAAC,GAAD,CAAcP,UAAU,mBC3BnBY,I,OANA,kBACb,gD,mBCLIC,G,8MACJ3D,MAAQ,CACN4D,SAAU,GACVC,SAAU,I,EAGZC,MAAQ,SAACC,GACPA,EAAMC,iBAEF,EAAKhE,MAAM4D,UAAY,EAAK5D,MAAM6D,SACpC,EAAKhB,MAAMG,SAAS,CAClB9C,KAAM,QACNI,QAAS,CACPsD,SAAU,EAAK5D,MAAM4D,SACrBC,SAAU,EAAK7D,MAAM6D,YAIzB,EAAKhB,MAAMG,SAAS,CAAE9C,KAAM,uB,EAIhC+D,qBAAuB,SAAAC,GAAY,OAAI,SAACH,GACtC,EAAKI,SAAL,gBACGD,EAAeH,EAAMK,OAAOC,U,0EAK/B,OACE,6BACGC,KAAKzB,MAAMM,MAAMvC,OAAOb,cACvB,wBACE+C,UAAU,QACVyB,KAAK,SAEJD,KAAKzB,MAAMM,MAAMvC,OAAOb,cAG7B,0BAAMyE,SAAUF,KAAKR,OACnB,qCACA,6BACE,2BAAOW,QAAQ,YAAf,YAEE,2BACEvE,KAAK,OACLwE,KAAK,WACLL,MAAOC,KAAKtE,MAAM4D,SAClBe,SAAUL,KAAKL,qBAAqB,gBAI1C,6BACE,2BAAOQ,QAAQ,YAAf,YAEE,2BACEvE,KAAK,WACLwE,KAAK,WACLL,MAAOC,KAAKtE,MAAM6D,SAClBc,SAAUL,KAAKL,qBAAqB,gBAI1C,6BACE,2BACEnB,UAAU,SACV5C,KAAK,SACLwE,KAAK,SACLL,MAAM,aAIZ,sC,GAxEgBO,aAsFThC,eAAQK,GAARL,CAAyBe,ICtFlCkB,G,8MACJ7E,MAAQ,CACN4D,SAAU,GACVC,SAAU,I,EAGZjC,aAAe,SAACmC,GACdA,EAAMC,iBAEF,EAAKhE,MAAM4D,UAAY,EAAK5D,MAAM6D,SACpC,EAAKhB,MAAMG,SAAS,CAClB9C,KAAM,WACNI,QAAS,CACPsD,SAAU,EAAK5D,MAAM4D,SACrBC,SAAU,EAAK7D,MAAM6D,YAIzB,EAAKhB,MAAMG,SAAS,CAAC9C,KAAM,8B,EAI/B+D,qBAAuB,SAAAC,GAAY,OAAI,SAACH,GACtC,EAAKI,SAAL,gBACGD,EAAeH,EAAMK,OAAOC,U,0EAIvB,IAAD,OACP,OACE,6BACGC,KAAKzB,MAAMjC,OAAOT,qBACjB,wBACE2C,UAAU,QACVyB,KAAK,SAEJD,KAAKzB,MAAMjC,OAAOT,qBAGvB,0BAAMqE,SAAUF,KAAK1C,cACnB,6CACA,6BACE,2BAAO6C,QAAQ,YAAf,YAEE,2BACEvE,KAAK,OACLwE,KAAK,WACLL,MAAOC,KAAKtE,MAAM4D,SAClBe,SAAUL,KAAKL,qBAAqB,gBAI1C,6BACE,2BAAOQ,QAAQ,YAAf,YAEE,2BACEvE,KAAK,WACLwE,KAAK,WACLL,MAAOC,KAAKtE,MAAM6D,SAClBc,SAAUL,KAAKL,qBAAqB,gBAI1C,6BACE,2BACEnB,UAAU,WACV5C,KAAK,SACLwE,KAAK,SACLL,MAAM,eAIZ,gCACE,4BACEnE,KAAK,SACL4C,UAAU,cACVC,QAAS,WAAO,EAAKF,MAAMG,SAAS,CAAC9C,KAAM,wBAH7C,e,GAzEiB0E,aAsFZhC,eAAQK,GAARL,CAAyBiC,IC1BzBjC,eAAQK,GAARL,EA5CQ,SAACC,GAAU,IAY5BiC,EAPSC,EAKTlC,EALFmC,UAEAC,EAGEpC,EAHFoC,aACA9B,EAEEN,EAFFM,MACG+B,EAT2B,aAU5BrC,EAV4B,sCA6BhC,OAZEiC,EAHE3B,EAAMtC,KAAK4C,GAGKsB,EACW,UAApB5B,EAAM/C,UAGGuD,GAIAkB,GAIhB1B,EAAMtC,KAAK4C,IAAsB,MAAhBwB,EACZ,kBAAC,KAAD,CAAUE,OAAK,EAACC,KAAMF,EAAWG,KAAMhC,GAAI4B,IAKhD,kBAAC,KAAD,iBAGMC,EAHN,CAIEF,UAAWF,QC5CJQ,ICIA1C,YAAQK,GAARL,EAXE,SAACC,GAAD,OACf,6BACE,wBAAIY,GAAG,WAAP,YACaZ,EAAMM,MAAMtC,KAAK+C,SAD9B,KAGA,0CAAgBf,EAAMM,MAAMtC,KAAK4C,IACjC,kBAAC,GAAD,CAAcX,UAAU,eDPX,kBACf,6BACE,2CEHEyC,I,qNACFvF,MAAQ,CACJwF,QAAS,mB,EASbC,QAAU,SAAC1B,GACP,EAAKlB,MAAM6C,QAAQC,KAAK,W,0EAIxB,OACI,yBAAK7C,UAAU,aACX,4BAAKwB,KAAKtE,MAAMwF,SAEhB,yBAAK1C,UAAU,QACX,yBAAKA,UAAU,uBACX,0kBAIA,8eAIA,4XAIJ,yBAAKA,UAAU,uBACX,iDACA,4BACIA,UAAU,mBACVC,QAASuB,KAAKmB,SAFlB,gB,GApCEb,cAiDXhC,eAAQK,GAARL,CAAyB2C,I,sGC9ClCK,I,6LACQ,IAAD,OAEL,OACI,yBAAK9C,UAAU,cAEX,kBAAC,KAAD,CACI+C,SAAS,QACT9C,QAAS,SAACgB,GAAD,OAAW,EAAKlB,MAAMiD,YAAY/B,EAAO,EAAKlB,MAAMkD,OAC7DtC,GAAG,a,GATFmB,cAiBNhC,eAAQK,GAARL,CAAyBgD,I,wCCdlCI,G,sLAEE,IAAMD,EAAOzB,KAAKzB,MAAMM,MAAMzC,aAC9B,OACI,6BACI,yBAAKoC,UAAU,SAEf,kBAACmD,GAAA,EAAD,CAAQC,KAAK,QAAQpD,UAAU,iBAAiBC,QAASuB,KAAKzB,MAAMiD,aAApE,KAEA,yBAAKhD,UAAU,iBAEX,wBAAIA,UAAU,eAAewB,KAAKzB,MAAMM,MAAMzC,aAAagE,MAE1DJ,KAAKzB,MAAMM,MAAMzC,aAAayF,QAC9B7B,KAAKzB,MAAMM,MAAMzC,aAAa0F,MAC/B,6BACA,6BACA,yBAAK9C,IAAK+C,KAAYvD,UAAU,eAAmB,6BACnD,2BAAIwB,KAAKzB,MAAMM,MAAMzC,aAAa4F,aAClC,6BAEA,uBAAGC,KAAM,mDAAqDR,EAAKrB,KAA1D,IACCqB,EAAKI,SADf,sB,GArBAvB,aAiCLhC,eAAQK,GAARL,CAAyBoD,I,yOC7BxC,IAAMQ,GAAYC,EAAQ,KAEpBC,GAAQC,aAAe,CACzBC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,cAKnBE,G,8MAEFhH,MAAM,CACFiH,gBAAgB,EAChBC,KAAM,MACNC,IAAK,GACLC,IAAK,I,EAmBXC,YAAc,SAACtD,EAAO9B,GACpB,EAAKkC,UAAS,SAAAmD,GAAS,MAAK,CACxBL,gBAAiBK,EAAUL,mBAC3B,WACgC,GAA7B,EAAKjH,MAAMiH,gBACd,EAAKpE,MAAMG,SAAS,CAAC9C,KAAK,aAAcI,QAAS2B,Q,EAKvDsF,aAAe,SAACxD,EAAO9B,GACnB,EAAKkC,S,4VAAL,IACO,EAAKnE,MADZ,CAEIkH,KAAMjF,KAEVV,QAAQC,IAAIS,I,EAIhBuF,mBAAqB,SAACC,GAClB,EAAKtD,SAAS,CACVgD,IAAKM,EAASC,OAAOC,SACrBP,IAAKK,EAASC,OAAOE,a,qFA5BxBC,UAAUC,aACTD,UAAUC,YAAYC,mBAAmBzD,KAAKkD,sB,+BAkC1C,IAIJQ,EAJG,QAOe,OAAnB1D,KAAKtE,MAAMkH,OACVc,EAAmB1D,KAAKzB,MAAMM,MAAM5C,mBAAmB0H,KAAI,SAAClC,EAAMmC,GAC9D,OACI,kBAAC,GAAD,CAAQC,IAAKD,EAAOpF,UAAU,OAC9BqE,IAAKpB,EAAKoB,IACVC,IAAKrB,EAAKqB,IACVtB,YAAa,EAAKuB,YAClBtB,KAAMA,QAMI,SAAnBzB,KAAKtE,MAAMkH,QAKVc,EAJuB1D,KAAKzB,MAAMM,MAAM5C,mBAAmB6H,QAAO,SAACrC,EAAMmC,GACrE,OAAsB,IAAfnC,EAAKsC,SAGoBJ,KAAI,SAAClC,EAAMmC,GAC3C,OACI,kBAAC,GAAD,CAAQC,IAAKD,EAAOpF,UAAU,OAC9BqE,IAAKpB,EAAKoB,IACVC,IAAKrB,EAAKqB,IACVtB,YAAa,EAAKuB,YAClBtB,KAAMA,QAMI,eAAnBzB,KAAKtE,MAAMkH,OAKVc,EAJoB1D,KAAKzB,MAAMM,MAAM5C,mBAAmB6H,QAAO,SAACrC,EAAMmC,GAClE,OAA4B,IAArBnC,EAAKuC,eAGiBL,KAAI,SAAClC,EAAMmC,GACxC,OACI,kBAAC,GAAD,CAAQC,IAAKD,EAAOpF,UAAU,OAC9BqE,IAAKpB,EAAKoB,IACVC,IAAKrB,EAAKqB,IACVtB,YAAa,EAAKuB,YAClBtB,KAAMA,QAMI,QAAnBzB,KAAKtE,MAAMkH,OAKVc,EAJsB1D,KAAKzB,MAAMM,MAAM5C,mBAAmB6H,QAAO,SAACrC,EAAMmC,GACpE,OAAqB,IAAdnC,EAAKwC,QAGmBN,KAAI,SAAClC,EAAMmC,GAC1C,OACI,kBAAC,GAAD,CAAQC,IAAKD,EAAOpF,UAAU,OAC1BqE,IAAKpB,EAAKoB,IACVC,IAAKrB,EAAKqB,IACVtB,YAAa,EAAKuB,YAClBtB,KAAMA,QAKtBxE,QAAQC,IAAI8C,KAAKtE,MAAMoH,KACP9C,KAAKtE,MAAMmH,IACX7C,KAAKtE,MAAMoH,IAD3B,IAMIoB,EAAc,8BAKlB,OAJGlE,KAAKtE,MAAMiH,iBACVuB,EAAc,kBAAC,GAAD,CAAO/E,GAAG,QAAQqC,YAAaxB,KAAK+C,eAIpD,yBAAKvE,UAAU,WACf,yBAAM2F,MAAO,CAAEC,OAAQ,OAAQC,MAAO,SACrCH,EACK,kBAAC,KAAD,CACAI,iBAAkB,CAAET,IAAKU,2CACzBC,cAAexE,KAAKzB,MAAMkG,OAC1BC,YAAa1E,KAAKzB,MAAMoG,KACxBC,QAAS,CACTC,OAAQ3C,KAGHwB,EAGL,yBACIlF,UAAU,WACVqE,IAAK7C,KAAKtE,MAAMmH,IAChBC,IAAK9C,KAAKtE,MAAMoH,KACnB,yBAAK9D,IAAK8F,UAOf,yBAAKtG,UAAU,kBACX,kBAACuG,GAAA,EAAD,CAAe3C,MAAOA,IAClB,kBAAC4C,GAAA,EAAD,CAAapD,KAAK,QAAQqD,QAAQ,YAAYC,MAAM,WAChD,kBAACvD,GAAA,EAAD,CACIlD,QAAS,SAACgB,GAAD,OAAW,EAAKwD,aAAaxD,EAAO,UADjD,QAEA,kBAACkC,GAAA,EAAD,CACIlD,QAAS,SAACgB,GAAD,OAAW,EAAKwD,aAAaxD,EAAO,WADjD,SAEA,kBAACkC,GAAA,EAAD,CACIlD,QAAS,SAACgB,GAAD,OAAW,EAAKwD,aAAaxD,EAAO,iBADjD,eAEA,kBAACkC,GAAA,EAAD,CACIlD,QAAS,SAACgB,GAAD,OAAW,EAAKwD,aAAaxD,EAAO,SADjD,e,GA3KEa,aAAhBoC,GASKyC,aAAe,CAClBV,OAAQ,CACJ5B,IAAK,MACLC,KAAM,OAEV6B,KAAM,IAuKCrG,mBAAQK,GAARL,CAAyBoE,I,ulBCpMlC0C,G,8MACF1J,MAAQ,CACJ0E,KAAM,GACNyB,QAAS,GACTC,MAAO,GACPE,YAAa,GACbqD,QAAQ,GACRpB,MAAM,EACND,aAAa,EACbD,OAAO,EACPuB,UAAW,GACXC,UAAU,G,EAqBdC,kBAAoB,SAAC/F,GAClB,EAAKlB,MAAMG,SAAS,CAAC9C,KAAK,cAAeI,QAAS,EAAKN,QACtD+J,KAAKC,KAAK,CACNC,KAAM,8BACN/J,KAAM,UACNgK,kBAAmB,QACpBC,MAAK,SAACC,GACL,EAAKvH,MAAM6C,QAAQC,KAAnB,Y,uFAzBc5B,EAAOsG,GACzB,IAAMC,EAAavG,EAAMK,OAAOC,MAChCC,KAAKH,SAAL,MACOG,KAAKtE,MADZ,gBAEKqK,EAAUC,KAEf/I,QAAQC,IAAI8C,KAAKtE,S,qCAGN+D,EAAMsG,GAAU,IAAD,OAC1B/F,KAAKH,SAAL,MACOG,KAAKtE,MADZ,gBAEKqK,EAAUtG,EAAMK,OAAOmG,WACzB,WACChJ,QAAQC,IAAI,EAAKxB,Y,+BAgBf,IAAD,OACL,OACI,yBAAK8C,UAAU,eACX,6DACA,2BACI5C,KAAK,OACLsK,YAAY,OACZ1H,UAAU,gBACV6B,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,WAE3D,6BACA,2BACI7D,KAAK,OACLsK,YAAY,UACZ1H,UAAU,gBACV6B,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,cAE3D,6BACA,8BACI7D,KAAK,OACLsK,YAAY,cACZ7F,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,kBAC3D,6BAEA,yBAAKjB,UAAU,gBACf,2BAAO5C,KAAK,WAAWwE,KAAK,OAAOL,MAAM,OAAOZ,GAAG,OAC/CkB,SAAU,SAACZ,GAAD,OAAW,EAAK2G,eAAe3G,EAAO,WACpD,2BAAO4G,IAAI,QAAX,QAEA,2BAAOzK,KAAK,WAAWwE,KAAK,cAAcL,MAAM,OAAOZ,GAAG,cACtDkB,SAAU,SAACZ,GAAD,OAAW,EAAK2G,eAAe3G,EAAO,kBACpD,2BAAO4G,IAAI,eAAX,eAEA,2BAAOzK,KAAK,WAAWwE,KAAK,QAAQL,MAAM,OAAOZ,GAAG,QAChDkB,SAAU,SAACZ,GAAD,OAAW,EAAK2G,eAAe3G,EAAO,YACpD,2BAAO4G,IAAI,SAAX,SACA,6BACA,kBAAC1E,GAAA,EAAD,CAAQlD,QAASuB,KAAKwF,kBAAmB5J,KAAK,UAA9C,gB,GAjFS0E,aAyFVhC,eAAQK,GAARL,CAAyB8G,IC/FlCkB,G,8MAEFC,UAAY,SAAC9G,GACT,EAAKlB,MAAM6C,QAAQC,KAAnB,gBAAiC,EAAK9C,MAAMiI,QAAQrH,M,0EAMpD,IAAMsH,EAAOC,KAAO1G,KAAKzB,MAAMiI,QAAQlB,WAAWqB,OAAO,aAEzD,OACQ,4BACI,4BAAK3G,KAAKzB,MAAMiI,QAAQpG,MACxB,4BAAKqG,GACL,4BAAI,4BAAQhI,QAASuB,KAAKuG,WAAtB,c,GAfIjG,aAsBbsG,gBAAWN,ICpBpBO,G,iMAIE7G,KAAKzB,MAAMG,SAAS,CAAC9C,KAAM,gB,+BAIxB,IAAIkL,EAAY9G,KAAKzB,MAAMM,MAAM3C,aAAayH,KAAI,SAAClC,EAAMmC,GACrD,OAAQ,kBAAC,GAAD,CAAe4C,QAAS/E,EAAMoC,IAAKD,OAIlD,OACI,yBAAKpF,UAAU,mBAEX,+CAEA,2BAAOA,UAAU,eACb,4BACI,oCACA,oCACA,qCAEJ,+BACKsI,S,GAzBGxG,aAmCbhC,eAAQK,GAARL,CAAyBuI,I,kkBCrClCE,G,8MACFrL,MAAQ,CACJ0E,KAAK,GACLyB,QAAS,GACTC,MAAO,GACPE,YAAa,GACbqD,QAAS,GACTxC,IAAI,GACJC,IAAK,GACLmB,KAAK,GACLD,YAAY,GACZD,MAAO,GACPwB,SAAU,I,EA0BdC,kBAAoB,SAAC/F,GACjB,IAAMuH,EAAiB,EAAKC,kBAC5B,EAAK1I,MAAMG,SAAS,CAAC9C,KAAK,WAAYI,QAASgL,IAC/C,EAAKzI,MAAM6C,QAAQC,KAAK,W,EAG5BpD,cAAgB,SAACwB,GACb,EAAKlB,MAAMG,SAAS,CAAC9C,KAAK,iBAAkBI,QAAS,EAAKuC,MAAM2I,MAAMC,OAAOhI,KAC7E,EAAKZ,MAAM6C,QAAQC,KAAK,W,qFA9BxBrB,KAAKzB,MAAMG,SAAS,CAAC9C,KAAM,WAAYI,QAAQgE,KAAKzB,MAAM2I,MAAMC,OAAOhI,O,4CAIrDM,EAAOsG,GACzB,IAAMC,EAAavG,EAAMK,OAAOC,MAChCC,KAAKH,SAAL,MACOG,KAAKtE,MADZ,gBAEKqK,EAAUC,KAEf/I,QAAQC,IAAI8C,KAAKtE,S,qCAGN+D,EAAMsG,GAAU,IAAD,OAC1B/F,KAAKH,SAAL,MACOG,KAAKtE,MADZ,gBAEKqK,EAAUtG,EAAMK,OAAOmG,WACzB,WACChJ,QAAQC,IAAI,EAAKxB,Y,wCAiBrB,IAAI0L,EAAmBpH,KAAKzB,MAAMM,MAAM1C,YAAY,GAiCpD,OAhCAc,QAAQC,IAAI,0BAA2BkK,GACjB,KAAnBpH,KAAKtE,MAAM0E,OACVgH,EAAiBhH,KAAOJ,KAAKtE,MAAM0E,MAEd,KAAtBJ,KAAKtE,MAAMmG,UACVuF,EAAiBvF,QAAU7B,KAAKtE,MAAMmG,SAEnB,KAApB7B,KAAKtE,MAAMoG,QACVsF,EAAiBtF,MAAQ9B,KAAKtE,MAAMoG,OAEX,KAA1B9B,KAAKtE,MAAMsG,cACVoF,EAAiBpF,YAAchC,KAAKtE,MAAMsG,aAErB,KAAtBhC,KAAKtE,MAAM2J,UACV+B,EAAiB/B,QAAUrF,KAAKtE,MAAM2J,SAErB,KAAlBrF,KAAKtE,MAAMmH,MACVuE,EAAiBvE,IAAM7C,KAAKtE,MAAMmH,KAEjB,KAAlB7C,KAAKtE,MAAMoH,MACVsE,EAAiBtE,IAAM9C,KAAKtE,MAAMoH,KAEhB,KAAnB9C,KAAKtE,MAAMuI,OACVmD,EAAiBnD,KAAOjE,KAAKtE,MAAMuI,MAEV,KAA1BjE,KAAKtE,MAAMsI,cACVoD,EAAiBpD,YAAchE,KAAKtE,MAAMsI,aAEpB,KAAvBhE,KAAKtE,MAAM6J,WACV6B,EAAiB7B,SAAWvF,KAAKtE,MAAM6J,UAE3CtI,QAAQC,IAAI,2BAA4BkK,GACjCA,I,+BAGD,IAAD,OAEDC,EAAsB,CACtBjH,KAAK,GACLyB,QAAS,GACTC,MAAO,GACPE,YAAa,GACbqD,QAAS,GACTxC,IAAI,GACJC,IAAK,GACLmB,KAAK,GACLD,YAAY,GACZD,MAAO,IAOX,OAJsC,MAAnC/D,KAAKzB,MAAMM,MAAM1C,YAAY,KAC5BkL,EAAsBrH,KAAKzB,MAAMM,MAAM1C,YAAY,IAInD,yBAAKqC,UAAU,YACX,yBAAKA,UAAU,YACX,oCAAU6I,EAAoBjH,MAC9B,2BAAOxE,KAAK,OACRyE,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,SACvDyG,YAAY,WACZ/G,GAAG,mBAIX,yBAAKX,UAAU,YACX,uCAAa6I,EAAoBxF,SACjC,2BAAOjG,KAAK,OACRyE,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,YACvDyG,YAAY,iBAIpB,yBAAK1H,UAAU,YACX,qCAAW6I,EAAoBvF,OAC/B,2BAAOlG,KAAK,OACRyE,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,UACvDyG,YAAY,iBAIpB,yBAAK1H,UAAU,YACX,2CAAiB6I,EAAoBrF,aACrC,2BAAOpG,KAAK,OACRyE,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,gBACvDyG,YAAY,qBAIpB,yBAAK1H,UAAU,YACX,wCAAc6I,EAAoBhC,SAClC,2BAAOzJ,KAAK,OACRyE,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,YACvDyG,YAAY,iBAIpB,yBAAK1H,UAAU,YACX,yCAAe6I,EAAoBxE,KACnC,2BAAOjH,KAAK,OACRyE,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,QACvDyG,YAAY,mBAIpB,yBAAK1H,UAAU,YACX,yCAAe6I,EAAoBvE,KACnC,2BAAOlH,KAAK,OACRyE,SAAU,SAACZ,GAAD,OAAW,EAAK0G,sBAAsB1G,EAAO,QACvDyG,YAAY,mBAGpB,6BAEA,2BAAOtK,KAAK,WAAWwE,KAAK,OAAOL,MAAM,OAAOZ,GAAG,OAC/CkB,SAAU,SAACZ,GAAD,OAAW,EAAK2G,eAAe3G,EAAO,WACpD,2BAAO4G,IAAI,QAAX,QAEA,2BAAOzK,KAAK,WAAWwE,KAAK,cAAcL,MAAM,OAAOZ,GAAG,cACtDkB,SAAU,SAACZ,GAAD,OAAW,EAAK2G,eAAe3G,EAAO,kBACpD,2BAAO4G,IAAI,eAAX,eAEA,2BAAOzK,KAAK,WAAWwE,KAAK,QAAQL,MAAM,OAAOZ,GAAG,QAChDkB,SAAU,SAACZ,GAAD,OAAW,EAAK2G,eAAe3G,EAAO,YACpD,2BAAO4G,IAAI,SAAX,SACA,6BACA,2BAAOzK,KAAK,WAAWwE,KAAK,WAAWL,MAAM,OAAOZ,GAAG,WACnDkB,SAAU,SAACZ,GAAD,OAAW,EAAK2G,eAAe3G,EAAO,eACpD,2BAAO4G,IAAI,YAAX,YACA,4BAAQ5H,QAASuB,KAAKwF,kBAAmB5J,KAAK,UAA9C,QACA,4BAAQ6C,QAASuB,KAAK/B,eAAtB,e,GAtLOqC,aA4LRhC,eAAQK,GAARL,CAAyByI,IC/JlCO,I,wMAEFtH,KAAKzB,MAAMG,SAAS,CAAC9C,KAAM,eAC3BoE,KAAKzB,MAAMG,SAAS,CAAC9C,KAAM,e,+BAK3B,OACE,kBAAC,KAAD,KACE,6BACE,kBAAC,GAAD,MACA,yBAAK4C,UAAU,WACf,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAUqC,OAAK,EAACC,KAAK,IAAI/B,GAAG,SAC5B,kBAAC,KAAD,CACE8B,OAAK,EACLE,KAAK,WACLL,UAAW6G,KAEb,kBAAC,KAAD,CACE1G,OAAK,EACLE,KAAK,QACLL,UAAWO,KAEb,kBAAC,KAAD,CACEJ,OAAK,EACLE,KAAK,OACLL,UAAWgC,KAWb,kBAAC,GAAD,CACE7B,OAAK,EACLE,KAAK,SACLL,UAAWmG,KAEb,kBAAC,GAAD,CACE9F,KAAK,YACLL,UAAWqG,KAIb,kBAAC,GAAD,CACElG,OAAK,EACLE,KAAK,QACLL,UAAWM,KAIb,kBAAC,GAAD,CACEH,OAAK,EACLE,KAAK,SACLJ,aAAa,SACbD,UAAWrB,KAEb,kBAAC,GAAD,CACEwB,OAAK,EACLE,KAAK,gBACLJ,aAAa,SACbD,UAAWH,KAIb,kBAAC,KAAD,CAAOiH,OAAQ,kBAAM,wCAGvB,kBAAC,GAAD,Y,GA1EQlH,cAgFHhC,eAAQK,GAARL,CAAyBgJ,ICpGlCG,GAAiBC,cAKjBC,GAEJ,CAACF,IAEG5I,GAAQ+I,YAGZvL,EAEAwL,IAAe,WAAf,EAAmBF,KAKrBF,GAAeK,IAAI1J,IAEnB2J,IAASP,OACP,kBAAC,IAAD,CAAU3I,MAAOA,IACf,kBAAC,GAAD,OAEFmJ,SAASC,eAAe,iB","file":"static/js/main.601a4921.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2b430c5a.png\";","module.exports = __webpack_public_path__ + \"static/media/gpsicon.440ea8fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/restaurant.d9af8db5.svg\";","module.exports = __webpack_public_path__ + \"static/media/compass.74f3e470.svg\";","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const restaurantsReducer = (state = [], action) => {\n    switch (action.type) {\n      case 'SET_PINS':\n        return action.payload;\n      default:\n        return state;\n    }\n  };\n  \n  export default restaurantsReducer;\n  ","const adminReducer = (state = [], action) => {\n    switch (action.type) {\n      case 'SET_ADMIN':\n        return action.payload;\n      default:\n        return state;\n    }\n  };\n  \n  export default adminReducer;\n  ","const editReducer = (state = {}, action) => {\n    switch (action.type) {\n      case 'SET_EDIT':\n        return action.payload;\n      default:\n        return state;\n    }\n  };\n  \n  export default editReducer;\n  ","const modalReducer = (state = {}, action) => {\n    switch (action.type) {\n      case 'MODAL_INFO':\n        return action.payload;\n      default:\n        return state;\n    }\n  };\n  \n  export default modalReducer;\n  ","import { combineReducers } from 'redux';\nimport errors from './errors.reducer';\nimport loginMode from './loginMode.reducer';\nimport user from './user.reducer';\nimport restaurantsReducer from './restaurants.reducer';\nimport adminReducer from './admin.reducer';\nimport editReducer from './edit.reducer';\nimport modalReducer from './modal.Reducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  restaurantsReducer,\n  adminReducer,\n  editReducer,\n  modalReducer\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* getApprovedList(){\n    try{\n      const response = yield axios.get('/api/restaurants/approved');\n      yield put({type: 'SET_PINS', payload: response.data});\n    }\n    catch(err) {\n      console.log('ERROR in GET', err)\n    }\n  }\n\n  function* postNewSubmission(action){\n    try{\n      const response = yield axios.post('/api/maps', action.payload);\n      \n      //console.log('saga', action.payload)\n      console.log('with lat and lng added:', response.data);\n    }\n    catch(err) {\n      console.log('ERROR in post', err)\n    }\n  }\n\n  function* getAdminList(){\n    try{\n      const response = yield axios.get('api/restaurants/all');\n      yield put({type: 'SET_ADMIN', payload: response.data});\n    }\n    catch(err){\n      console.log('Error retrieving admin list', err);\n    }\n  }\n\n  function* getEditItem(action){\n    try{\n      const response = yield axios.get(`api/restaurants/single/${action.payload}`);\n      yield put({type: 'SET_EDIT', payload: response.data});\n    }\n    catch(err){\n      console.log('Error retrieving single item to edit', err);\n    }\n  }\n\n  function* updateEditItem(action){\n    try{\n      yield axios.put(`/api/admin/edit`, action.payload);\n    }\n    catch(err){\n      console.log('Error editing listing', err);\n    }\n  }\n\n  function* deleteListing(action){\n    try{\n      const response = yield axios.delete(`api/admin/delete/${action.payload}`);\n    }\n    catch(err){\n      console.log('Error retrieving single item to edit', err);\n    }\n  }\n\nfunction* restaurantsSaga() {\n    yield takeLatest('GET_PINS', getApprovedList);\n    yield takeLatest('SEND_SUBMIT', postNewSubmission);\n    yield takeLatest('GET_ADMIN', getAdminList);\n    yield takeLatest('GET_EDIT', getEditItem);\n    yield takeLatest('PUT_EDIT', updateEditItem);\n    yield takeLatest('DELETE_LISTING', deleteListing)\n    //yield takeLatest('POST_DB', postToDatabase);\n  }\n  \n  export default restaurantsSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './login.saga';\nimport registrationSaga from './registration.saga';\nimport userSaga from './user.saga';\nimport restaurantsSaga from './restaurants.saga';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    restaurantsSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","const mapStoreToProps = (reduxState) => {\n    return {\n        store: reduxState,\n        // reduxState properties bound directly to \"props\"\n        // ---------\n        // Instead of taking everything from state, we just want the user info.\n        // if you wanted you could write this code like this:\n        user: reduxState.user,\n        loginMode: reduxState.loginMode,\n        errors: reduxState.errors,\n        admin: reduxState.adminReducer\n    }\n};\n\nexport default mapStoreToProps;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport logo from '../Nav/logo.png'\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <img src={logo} className=\"nav-logo\" alt=\"Chews\"></img>\n    </Link>\n    <div className=\"nav-right\">\n    \n      <Link className=\"nav-link\" to=\"/map\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        Map\n      </Link>\n      <Link className=\"nav-link\" to=\"/suggest\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        Suggest Restaurant\n      </Link>\n      \n      {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n      {/* <Link className=\"nav-link\" to=\"/home\">\n        \n        {props.store.user.id ? 'Home' : 'Login / Register'}\n      </Link> */}\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.store.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/info\">\n            Info Page\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      {/* <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link> */}\n    </div>\n  </div>\n);\n\nexport default connect(mapStoreToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; Chews\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.store.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.store.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          {/* <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button> */}\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStoreToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStoreToProps)(RegisterPage);\n\n","import React from 'react';\nimport {\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    // redirect path to be used if the user is authorized\n    authRedirect,\n    store,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if (store.user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (store.loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // redirect a logged in user if an authRedirect prop has been provided\n  if (store.user.id && authRedirect != null) {\n    return <Redirect exact from={otherProps.path} to={authRedirect} />;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\nexport default connect(mapStoreToProps)(ProtectedRoute)\n\n\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst InfoPage = () => (\n  <div>\n    <p>\n      Info Page\n    </p>\n  </div>\n);\n\nexport default InfoPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\nconst UserPage = (props) => (\n  <div>\n    <h1 id=\"welcome\">\n      Welcome, { props.store.user.username }!\n    </h1>\n    <p>Your ID is: {props.store.user.id}</p>\n    <LogOutButton className=\"log-in\" />\n  </div>\n);\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStoreToProps)(UserPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\nimport './LandingPage.css';\n\nclass LandingPage extends Component {\n    state = {\n        heading: 'Class Component',\n    };\n\n\n\n\n\n\n    \n    onLogin = (event) => {\n        this.props.history.push('/login');\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h2>{this.state.heading}</h2>\n\n                <div className=\"grid\">\n                    <div className=\"grid-col grid-col_8\">\n                        <p>\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur id felis metus. Vestibulum et pulvinar tortor. Morbi pharetra lacus ut ex molestie blandit. Etiam et turpis sit amet risus mollis interdum. Suspendisse et justo vitae metus bibendum fringilla sed sed justo. Aliquam sollicitudin dapibus lectus, vitae consequat odio elementum eget. Praesent efficitur eros vitae nunc interdum, eu interdum justo facilisis. Sed pulvinar nulla ac dignissim efficitur. Quisque eget eros metus. Vestibulum bibendum fringilla nibh a luctus. Duis a sapien metus.\n                        </p>\n\n                        <p>\n                            Praesent consectetur orci dui, id elementum eros facilisis id. Sed id dolor in augue porttitor faucibus eget sit amet ante. Nunc consectetur placerat pharetra. Aenean gravida ex ut erat commodo, ut finibus metus facilisis. Nullam eget lectus non urna rhoncus accumsan quis id massa. Curabitur sit amet dolor nisl. Proin euismod, augue at condimentum rhoncus, massa lorem semper lacus, sed lobortis augue mi vel felis. Duis ultrices sapien at est convallis congue.\n                        </p>\n\n                        <p>\n                            Fusce porta diam ac tortor elementum, ut imperdiet metus volutpat. Suspendisse posuere dapibus maximus. Aliquam vitae felis libero. In vehicula sapien at semper ultrices. Vivamus sed feugiat libero. Sed sagittis neque id diam euismod, ut egestas felis ultricies. Nullam non fermentum mauris. Sed in enim ac turpis faucibus pretium in sit amet nisi.\n                        </p>\n                    </div>\n                    <div className=\"grid-col grid-col_4\">\n                        <h3>Already a Member?</h3>\n                        <button\n                            className=\"btn btn_sizeFull\"\n                            onClick={this.onLogin}\n                        >\n                            Login\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStoreToProps)(LandingPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport RoomRoundedIcon from '@material-ui/icons/RoomRounded';\nimport { isTemplateElement } from '@babel/types';\n// Basic class component structure for React with default state\n// value setup. When making a new component be sure to replace \n// the component name TemplateClass with the name for the new \n// component.\nclass Marker extends Component {\n    render() {\n        \n        return (\n            <div className=\"map-marker\">\n                \n                <RoomRoundedIcon \n                    fontSize=\"large\" \n                    onClick={(event) => this.props.modalToggle(event, this.props.item)}\n                    id=\"pin\" \n                     />\n                \n            </div>\n        );\n    }\n}\n\nexport default connect(mapStoreToProps)(Marker);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport { isTemplateElement } from '@babel/types';\nimport compass from '../MapPage/compass.svg'\nimport Button from '@material-ui/core/Button'\nimport Silverware from './restaurant.svg'\n\n// Basic class component structure for React with default state\n// value setup. When making a new component be sure to replace \n// the component name TemplateClass with the name for the new \n// component.\nclass Modal extends Component {\n    render() {\n        const item = this.props.store.modalReducer\n        return (\n            <div>\n                <div className=\"modal\">\n\n                <Button size=\"small\" className=\"btn-exit-modal\" onClick={this.props.modalToggle}>X</Button>\n\n                <div className=\"modal-content\">\n                    \n                    <h3 className=\"modal-title\">{this.props.store.modalReducer.name}</h3>\n                    \n                    {this.props.store.modalReducer.address}\n                    {this.props.store.modalReducer.phone}\n                    <br />\n                    <br />\n                    <img src={Silverware} className=\"silverware\"></img><br></br>\n                    <p>{this.props.store.modalReducer.description}</p>\n                    <br></br>\n                    \n                    <a href={`https://www.google.com/maps/search/?api=1&query=` + item.name +\n                        `,` + item.address}>Google Maps</a>\n\n                </div>\n\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default connect(mapStoreToProps)(Modal);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GoogleMapReact from 'google-map-react';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport {createMuiTheme, withStyles, makeStyles} from '@material-ui/core/styles';\nimport {ThemeProvider} from '@material-ui/styles';\nimport moment from 'moment';\nimport RoomRoundedIcon from '@material-ui/icons/RoomRounded';\nimport gpslogo from './gpsicon.svg';\n\nimport Marker from './Marker';\nimport Modal from './Modal';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\n\n\nconst mapStyles = require('./GoogleMapStyles.json');\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: { main: '#FFE9AA' }, \n      secondary: { main: '#0582CA' }, \n    },\n  });\n\n\nclass MapPage extends Component {\n    ////STATE controls modal, diet filter, and stores user location\n    state={\n        modalIsShowing: false,\n        show: 'all',\n        lat: '',\n        lng: '',\n    }\n\n    static defaultProps = {\n        center: {\n            lat: 39.04,\n            lng: -94.59\n        },\n        zoom: 12\n  };\n\n  \n  componentDidMount(){\n    if(navigator.geolocation){\n        navigator.geolocation.getCurrentPosition(this.onPositionReceived);\n    }\n  }\n\n\n  handleModal = (event, data) => {\n    this.setState(prevState => ({\n        modalIsShowing: !prevState.modalIsShowing,\n    }), () =>{\n        if(this.state.modalIsShowing == true)\n        this.props.dispatch({type:'MODAL_INFO', payload: data})\n        }\n    );\n  }\n\n  changeFilter = (event, data) => {\n      this.setState({\n          ...this.state,\n          show: data\n      })\n      console.log(data)\n  }\n\n\n  onPositionReceived = (position) => {\n      this.setState({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n      })\n    }   \n\n\n\n\n  render() {\n    \n    \n    ////CONDITIONAL RENDERING ACCORDING TO FILTER\n    let restaurantsArray; //holds restaurants to be shown\n\n    ////default is to render all approved restaurants\n    if(this.state.show == 'all'){\n        restaurantsArray = this.props.store.restaurantsReducer.map((item, index) => {\n            return (\n                <Marker key={index} className=\"test\"\n                lat={item.lat}\n                lng={item.lng}\n                modalToggle={this.handleModal}\n                item={item}\n                />\n            ) \n        })\n    }\n    ////if vegan is selected, show vegan restaurants\n    if(this.state.show == 'vegan'){\n        let veganRestaurants = this.props.store.restaurantsReducer.filter((item, index) => {\n            return item.vegan === true;\n        })\n\n        restaurantsArray = veganRestaurants.map((item, index) => {\n            return (\n                <Marker key={index} className=\"test\"\n                lat={item.lat}\n                lng={item.lng}\n                modalToggle={this.handleModal}\n                item={item}\n                />\n            ) \n        })\n    }\n    ////if gluten_free is selected, show gluten_free restaurants\n    if(this.state.show == 'gluten_free'){\n        let gfRestaurants = this.props.store.restaurantsReducer.filter((item, index) => {\n            return item.gluten_free === true;\n        })\n\n        restaurantsArray = gfRestaurants.map((item, index) => {\n            return (\n                <Marker key={index} className=\"test\"\n                lat={item.lat}\n                lng={item.lng}\n                modalToggle={this.handleModal}\n                item={item}\n                />\n            ) \n        })\n    }\n    ////if keto is selected, show keto restaurants\n    if(this.state.show == 'keto'){\n        let ketoRestaurants = this.props.store.restaurantsReducer.filter((item, index) => {\n            return item.keto === true;\n        })\n\n        restaurantsArray = ketoRestaurants.map((item, index) => {\n            return (\n                <Marker key={index} className=\"test\"\n                    lat={item.lat}\n                    lng={item.lng}\n                    modalToggle={this.handleModal}\n                    item={item}\n                />\n            ) \n        })\n    }\n    console.log(this.state.lng)\n    const userLat = this.state.lat;\n    const userLng = this.state.lng;\n    const userPinItem ='df'\n           \n\n    ////MODAL pops up depending on state\n    let detailsPane = <div></div>\n    if(this.state.modalIsShowing){\n        detailsPane = <Modal id=\"modal\" modalToggle={this.handleModal}></Modal>\n    }\n   \n    return (\n      <div className=\"map-div\">\n      <div  style={{ height: '92vh', width: '100%' }}>\n      {detailsPane} \n            <GoogleMapReact\n            bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS }}\n            defaultCenter={this.props.center}\n            defaultZoom={this.props.zoom}\n            options={{\n            styles: mapStyles}}\n            >\n            \n                {restaurantsArray} \n        \n\n            <div\n                className=\"user-pin\"\n                lat={this.state.lat}\n                lng={this.state.lng}\n            ><img src={gpslogo}></img></div>\n\n\n\n            </GoogleMapReact>\n        </div>\n\n        <div className=\"filter-buttons\">\n            <ThemeProvider theme={theme}>\n                <ButtonGroup size=\"small\" variant=\"contained\" color=\"primary\">\n                    <Button \n                        onClick={(event) => this.changeFilter(event, 'keto')}>Keto</Button> \n                    <Button\n                        onClick={(event) => this.changeFilter(event, 'vegan')}>Vegan</Button> \n                    <Button\n                        onClick={(event) => this.changeFilter(event, 'gluten_free')}>Gluten-Free</Button> \n                    <Button\n                        onClick={(event) => this.changeFilter(event, 'all')}>All</Button> \n                </ButtonGroup>\n            </ThemeProvider>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStoreToProps)(MapPage);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport Button from '@material-ui/core/Button';\nimport Swal from 'sweetalert2';\n\n\n// Basic class component structure for React with default state\n// value setup. When making a new component be sure to replace \n// the component name TemplateClass with the name for the new \n// component.\nclass SubmitPage extends Component {\n    state = {\n        name: '',\n        address: '',\n        phone: '',\n        description: '',\n        website:'',\n        keto: false,\n        gluten_free: false,\n        vegan: false,\n        submitted: '',\n        approved: false\n    };\n\n    handleChangeInputText(event, dataKey) {\n        const fieldValue = event.target.value;\n        this.setState({\n            ...this.state,\n            [dataKey]: fieldValue,\n        })\n        console.log(this.state);\n    }\n\n    handleCheckbox(event,dataKey) {\n        this.setState({\n            ...this.state,\n            [dataKey]: event.target.checked\n        }, () => {\n            console.log(this.state)\n        })\n    }\n\n    handleClickSubmit = (event) => {\n       this.props.dispatch({type:'SEND_SUBMIT', payload: this.state});\n        Swal.fire({\n            text: 'Thanks for your suggestion!',\n            type: 'success',\n            confirmButtonText: 'Map'\n        }).then((result) => {\n            this.props.history.push(`/map`);\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"submit-view\">\n                <h2>Submit a suggestion for Chews</h2>\n                <input\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    className=\"suggest-input\"\n                    onChange={(event) => this.handleChangeInputText(event, 'name')}>\n                </input>\n                <br></br>\n                <input\n                    type=\"text\"\n                    placeholder=\"Address\"\n                    className=\"suggest-input\"\n                    onChange={(event) => this.handleChangeInputText(event, 'address')}>\n                </input>\n                <br></br>\n                <textarea\n                    type=\"text\"\n                    placeholder=\"Description\"\n                    onChange={(event) => this.handleChangeInputText(event, 'description')}/>\n                <br></br>\n                \n                <div className=\"checkbox-div\">\n                <input type=\"checkbox\" name=\"keto\" value=\"true\" id=\"keto\"\n                    onChange={(event) => this.handleCheckbox(event, 'keto')}/>\n                <label for=\"keto\">Keto</label>\n\n                <input type=\"checkbox\" name=\"gluten_free\" value=\"true\" id=\"gluten_free\"\n                    onChange={(event) => this.handleCheckbox(event, 'gluten_free')}/>\n                <label for=\"gluten_free\">Gluten-free</label>\n\n                <input type=\"checkbox\" name=\"vegan\" value=\"true\" id=\"vegan\"\n                    onChange={(event) => this.handleCheckbox(event, 'vegan')} />\n                <label for=\"vegan\">Vegan</label>\n                <br></br>\n                <Button onClick={this.handleClickSubmit} type=\"submit\">Submit</Button>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default connect(mapStoreToProps)(SubmitPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport moment from 'moment';\n\nclass AdminListItem extends Component {\n\n    clickEdit = (event) => {\n        this.props.history.push(`/edit/${this.props.listing.id}`);\n    }\n\n    \n\n    render() {\n        const date = moment(this.props.listing.submitted).format(\"MMM Do YY\"); \n\n        return (\n                <tr>\n                    <td>{this.props.listing.name}</td>\n                    <td>{date}</td>\n                    <td><button onClick={this.clickEdit}>Edit</button></td>\n                </tr>\n                \n        );\n    }\n}\n\nexport default withRouter(AdminListItem);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport AdminListItem from '../AdminListItem/AdminListItem';\nimport moment from 'moment';\n\n\nclass AdminListPage extends Component {\n    \n\n    componentDidMount(){\n        this.props.dispatch({type: 'GET_ADMIN'})\n    }\n\n    render() {\n           let adminList = this.props.store.adminReducer.map((item, index) => {\n               return  <AdminListItem listing={item} key={index} />\n                      \n       })\n\n        return (\n            <div className=\"admin-container\">\n\n                <h2>Admin list page</h2>\n\n                <table className=\"admin-table\">\n                    <tr>\n                        <th>Name</th>\n                        <th>Date</th>\n                        <th>Edit</th>\n                    </tr>\n                    <tbody>\n                        {adminList}\n                    </tbody>\n                    \n                </table>\n                \n            </div>\n        );\n    }\n}\n\nexport default connect(mapStoreToProps)(AdminListPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\n\nclass EditPage extends Component {\n    state = {\n        name:'',\n        address: '',\n        phone: '',\n        description: '',\n        website: '',\n        lat:'',\n        lng: '',\n        keto:'',\n        gluten_free:'',\n        vegan: '',\n        approved: ''\n    };\n\n    componentDidMount(){\n        this.props.dispatch({type: 'GET_EDIT', payload:this.props.match.params.id});\n        \n    }\n\n    handleChangeInputText(event, dataKey) {\n        const fieldValue = event.target.value;\n        this.setState({\n            ...this.state,\n            [dataKey]: fieldValue,\n        })\n        console.log(this.state);\n    }\n\n    handleCheckbox(event,dataKey) {\n        this.setState({\n            ...this.state,\n            [dataKey]: event.target.checked\n        }, () => {\n            console.log(this.state)\n        })\n    }\n\n    handleClickSubmit = (event) => {\n        const dispatchObject = this.consolidateEdit();\n        this.props.dispatch({type:'PUT_EDIT', payload: dispatchObject});\n        this.props.history.push('/admin')\n     }\n\n    deleteListing = (event) => {\n        this.props.dispatch({type:'DELETE_LISTING', payload: this.props.match.params.id});\n        this.props.history.push('/admin');\n    }\n\n    consolidateEdit(){\n       \n        let submitThisObject = this.props.store.editReducer[0];\n        console.log('item to submit pre edit', submitThisObject);\n        if(this.state.name !==''){\n            submitThisObject.name = this.state.name;\n        }\n        if(this.state.address !==''){\n            submitThisObject.address = this.state.address;\n        }\n        if(this.state.phone !==''){\n            submitThisObject.phone = this.state.phone;\n        }\n        if(this.state.description !==''){\n            submitThisObject.description = this.state.description;\n        }\n        if(this.state.website !==''){\n            submitThisObject.website = this.state.website;\n        }\n        if(this.state.lat !==''){\n            submitThisObject.lat = this.state.lat;\n        }\n        if(this.state.lng !==''){\n            submitThisObject.lng = this.state.lng;\n        }\n        if(this.state.keto !==''){\n            submitThisObject.keto = this.state.keto;\n        }\n        if(this.state.gluten_free !==''){\n            submitThisObject.gluten_free = this.state.gluten_free;\n        }\n        if(this.state.approved !==''){\n            submitThisObject.approved = this.state.approved;\n        };\n        console.log('item to submit post edit', submitThisObject);\n        return submitThisObject;\n    }\n\n    render() {\n        \n        let listingFromDatabase = {\n            name:'',\n            address: '',\n            phone: '',\n            description: '',\n            website: '',\n            lat:'',\n            lng: '',\n            keto:'',\n            gluten_free:'',\n            vegan: '',\n        }\n\n        if(this.props.store.editReducer[0] != null){\n            listingFromDatabase = this.props.store.editReducer[0];\n        };\n\n        return (\n            <div className=\"edit-box\">\n                <div className=\"edit-box\">\n                    <p>Name: {listingFromDatabase.name}</p>\n                    <input type=\"text\"\n                        onChange={(event) => this.handleChangeInputText(event, 'name')}\n                        placeholder=\"New name\"\n                        id=\"js-name-input\">\n                    </input>\n                </div>\n\n                <div className=\"edit-box\">\n                    <p>Address: {listingFromDatabase.address}</p>\n                    <input type=\"text\"\n                        onChange={(event) => this.handleChangeInputText(event, 'address')}\n                        placeholder=\"New address\">\n                    </input>\n                </div>\n                \n                <div className=\"edit-box\">\n                    <p>Phone: {listingFromDatabase.phone}</p>\n                    <input type=\"text\"\n                        onChange={(event) => this.handleChangeInputText(event, 'phone')}\n                        placeholder=\"New address\">\n                    </input>\n                </div>\n                \n                <div className=\"edit-box\">\n                    <p>Description: {listingFromDatabase.description}</p>\n                    <input type=\"text\"\n                        onChange={(event) => this.handleChangeInputText(event, 'description')}\n                        placeholder=\"New description\">\n                    </input>\n                </div>\n                \n                <div className=\"edit-box\">\n                    <p>Website:  {listingFromDatabase.website}</p>\n                    <input type=\"text\"\n                        onChange={(event) => this.handleChangeInputText(event, 'website')}\n                        placeholder=\"New website\">\n                    </input>\n                </div>\n\n                <div className=\"edit-box\">\n                    <p>Lattitude: {listingFromDatabase.lat}</p>\n                    <input type=\"text\"\n                        onChange={(event) => this.handleChangeInputText(event, 'lat')}\n                        placeholder=\"New lattitude\">\n                    </input>\n                </div>\n                \n                <div className=\"edit-box\">\n                    <p>Longitude: {listingFromDatabase.lng}</p>\n                    <input type=\"text\"\n                        onChange={(event) => this.handleChangeInputText(event, 'lng')}\n                        placeholder=\"New longitude\">\n                    </input>\n                </div>\n                <br></br>\n\n                <input type=\"checkbox\" name=\"keto\" value=\"true\" id=\"keto\"\n                    onChange={(event) => this.handleCheckbox(event, 'keto')}/>\n                <label for=\"keto\">Keto</label>\n\n                <input type=\"checkbox\" name=\"gluten_free\" value=\"true\" id=\"gluten_free\"\n                    onChange={(event) => this.handleCheckbox(event, 'gluten_free')}/>\n                <label for=\"gluten_free\">Gluten-free</label>\n\n                <input type=\"checkbox\" name=\"vegan\" value=\"true\" id=\"vegan\"\n                    onChange={(event) => this.handleCheckbox(event, 'vegan')} />\n                <label for=\"vegan\">Vegan</label>\n                <br></br>\n                <input type=\"checkbox\" name=\"approved\" value=\"true\" id=\"approved\"\n                    onChange={(event) => this.handleCheckbox(event, 'approved')} />\n                <label for=\"approved\">Approved</label>\n                <button onClick={this.handleClickSubmit} type=\"submit\">Save</button>\n                <button onClick={this.deleteListing}>Delete</button>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStoreToProps)(EditPage);\n","////import modules\nimport React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\n\n////import components\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport UserPage from '../UserPage/UserPage';\nimport InfoPage from '../InfoPage/InfoPage';\nimport LandingPage from '../LandingPage/LandingPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\nimport MapPage from '../MapPage/MapPage';\nimport SuggestPage from '../SuggestPage/SuggestPage';\nimport AdminListPage from '../AdminListPage/AdminListPage';\nimport EditPage from '../EditPage/EditPage';\n\nimport './App.css';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\n\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'});\n    this.props.dispatch({type: 'GET_PINS'});\n    \n  }\n\n  render() {\n    return (\n      <Router>\n        <div >\n          <Nav/>\n          <div className=\"map-div\">\n          <Switch >\n            <Redirect exact from=\"/\" to=\"/map\" />\n            <Route\n              exact\n              path=\"/suggest\"\n              component={SuggestPage}\n            />\n            <Route\n              exact\n              path=\"/home\"\n              component={LandingPage}\n            />\n            <Route\n              exact\n              path=\"/map\"\n              component={MapPage}\n            />\n            {/* <Route\n              exact\n              path=\"/admin\"\n              component={AdminListPage}\n            /> */}\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/user will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/user */}\n            <ProtectedRoute\n              exact\n              path=\"/admin\"\n              component={AdminListPage}\n            />\n            <ProtectedRoute\n              path=\"/edit/:id\"\n              component={EditPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will be redirected to the authRedirect path provided. */}\n            <ProtectedRoute\n              exact\n              path=\"/login\"\n              authRedirect=\"/admin\"\n              component={LoginPage}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/registration\"\n              authRedirect=\"/admin\"\n              component={RegisterPage}\n            />\n\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n  )}\n}\n\nexport default connect(mapStoreToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers/_root.reducer'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas/_root.saga'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}